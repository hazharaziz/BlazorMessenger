@page "/profile/{id:int}"
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject IUnitOfWork UnitOfWork
@inject IFollowerAPI FollowerAPI


<div style="padding: 20px;">
    <h2>@user.FirstName @user.LastName</h2>
    @if (currentUser.Id != user.Id)
    {
        @if (IsFollowing(user.Id))
        {
            <button @onclick="(() => UnFollowUser(user.Id))">Unfollow</button>
        }
        else
        {
            <button @onclick="(() => FollowUser(user.Id))">Follow</button>
        }
    }
    else
    {
        string status = (currentUser.IsPublic == 1) ? "Private" : "Public";
        <button>Make your account @status</button>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private User user;
    private User currentUser;

    protected override async Task OnInitializedAsync()
    {
        user = new User();
        currentUser = new User();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        string currentUsername = await SessionStorage.GetItemAsync<string>("username");
        user = UnitOfWork.Users.Get(Id);
        currentUser = UnitOfWork.Users.GetByUsername(currentUsername);
        StateHasChanged();
        await base.OnAfterRenderAsync(firstRender);
    }

    private bool IsFollowing(int id) =>
        FollowerAPI.HasFollower(id, currentUser.Id);

    private void FollowUser(int userId)
    {
        try
        {
            FollowerAPI.SendFollowRequest(userId, currentUser.Id);
        }
        catch { }
    }

    private void UnFollowUser(int userId)
    {
        try
        {
            FollowerAPI.Unfollow(userId, currentUser.Id);
        }
        catch { }
    }
}
