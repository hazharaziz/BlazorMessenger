@page "/people"
@inject ISearchable<User> SearchAPI
@inject IFollowerAPI FollowerAPI
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage


<h3>Search People</h3>
<EditForm Model="@searchQuery" OnValidSubmit="@SearchUser" class="mr-auto" style="margin: 10px;">
    <div style="display: block;">
        <input class="col-8" @bind="@searchQuery" type="text" id="search-input" placeholder="Search people" />
        <input class="col-2" type="submit" value="Submit" />
    </div>
</EditForm>

@foreach (User user in fetchedUsers)
{
    var name = $"{user.FirstName} {user.LastName}";
    <div class="row" id="user-@user.Id" style="padding: 10px; border-bottom: 1px black solid;">
        <a href="/profile/@user.Id" class="col-3">@name</a>
        @if (IsFollowing(user.Id))
        {
            <button class="col-1 ml-0" @onclick="(() => UnFollowUser(user.Id))">Unfollow</button>
        }
        else
        {
            <button class="col-1 ml-0" @onclick="(() => FollowUser(user.Id))">Follow</button>
        }
        <button class="col-1 ml-0">Profile</button>
    </div>
}

@code {

    private string searchQuery;
    private int currentUserId;
    private List<User> fetchedUsers;

    protected override async Task OnInitializedAsync()
    {
        searchQuery = string.Empty;
        currentUserId = 0;
        fetchedUsers = new List<User>();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        string username = await SessionStorage.GetItemAsync<string>("username");
        currentUserId = await SessionStorage.GetItemAsync<int>("id");
        StateHasChanged();
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task<bool> SearchUser()
    {
        try
        {
            fetchedUsers = (searchQuery != "") ? SearchAPI.Search(searchQuery) : new List<User>();
            return await Task.FromResult(true);
        }
        catch
        {
            return await Task.FromResult(false);
        }
    }

    private bool IsFollowing(int id) =>
        FollowerAPI.HasFollower(id, currentUserId);

    private void FollowUser(int userId)
    {
        try
        {
            FollowerAPI.SendFollowRequest(userId, currentUserId);
        }
        catch { }
    }

    private void UnFollowUser(int userId)
    {
        try
        {
            FollowerAPI.Unfollow(userId, currentUserId);
        }
        catch { }
    }
}
